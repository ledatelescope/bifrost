/*
 * Copyright (c) 2017-2022, The Bifrost Authors. All rights reserved.
 * Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.
 * Copyright (c) 2017, The University of New Mexico. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * * Neither the name of The Bifrost Authors nor the names of its
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#ifndef BF_GUNPACK_HU_INCLUDE_GUARD_
#define BF_GUNPACK_HU_INCLUDE_GUARD_

template<typename IType, typename OType>
struct GunpackFunctor {
	bool byte_reverse;
	bool align_msb;
	bool conjugate;
	GunpackFunctor(bool byte_reverse_, bool align_msb_, bool conjugate_);
	__device__ void operator()(IType ival, OType& oval);
};

template<typename T, typename U, typename Func, typename Size>
void launch_foreach_simple_gpu(T const*     in,
                               U*           out,
                               Size         nelement,
                               Func         func,
                               cudaStream_t stream=0);

template<typename T, typename U, typename V, typename Func, typename Size>
void launch_foreach_promote_gpu(T const*     in,
                                U*           tmp,
                                V*           out,
                                Size         nelement,
                                Func         func,
                                cudaStream_t stream=0);

#endif // BF_GUNPACK_HU_INCLUDE_GUARD_

